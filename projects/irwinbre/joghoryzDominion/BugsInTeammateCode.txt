s pretty easy to find. When compiling, I had issues with the Great Hall card. It wouldn’t compile, and it would stop my makefile cold in its feet. A web search for the errors presented told me there were flags missing. I tried to recompile the file properly outside of the makefile all on its own, and when I tried to run it, I received a segmentation fault. I used gdb to backtrace the source of the segmentation fault, and I came upon the first line of the short, four-line function. drawCard(int currentPlayer, struct gameState *state) was being called as drawCard(currentPlayer, handPos). handPos is an integer, not a gameState struct. This was causing the error here. Calling this function with state instead of handPos fixed the problem. The first bug was found and fixed.

The second bug was found in the Adventurer card. My test has an output showing the numerical values of the cards in the player’s hand before and after the Adventurer card is played. Before, it should show an Adventurer card (17) followed by -1 four times. After the card is played, it should should two treasure cards (4, 5, or 6) followed by -1 three times. All of the tests failed. Because I had written a test with good information like this, I could see that in every case, the hand was being filled with three treasure cards, not two. This made it pretty simple to find the source of the error. When I looked at my the function cardEffect_adventurer(), I saw immediately at the very top of the function that the while loop was looping until drawntreasure was less than or equal to 2. Since it started at 0, this means a card was being added to the hand for 0, 1, and 2: three times. This is why three treasure cards were being added into the hand instead of two. I changed <= to <, and the problem was solved.

